#!/usr/bin/env bash
set -euo pipefail
cd "$(dirname "${BASH_SOURCE[0]}")/.."

# Packages may be from repositories or the AUR.
packages=( \
  1password \
  alacritty \
  bash-language-server \
  cmake \
  diagnostic-languageserver \
  direnv \
  docker \
  dockerfile-language-server \
  fd \
  firefox-developer-edition \
  fwupd \
  fzf \
  gimp \
  git \
  github-cli \
  gnome \
  gnome-browser-connector \
  htop \
  intellij-idea-community-edition \
  jq \
  krita \
  libreoffice \
  lm_sensors \
  lua-format \
  lua-language-server \
  man-db \
  man-pages \
  mesa \
  msr-tools \
  mullvad-vpn \
  neovim \
  prettier \
  pyright \
  python-poetry \
  python-ruff \
  qbittorrent \
  qt6ct \
  shellcheck \
  signal-desktop \
  terraform \
  texinfo \
  throttled \
  tree \
  ttf-cascadia-code \
  tmux-plugin-manager \
  vim-language-server \
  vim-plug
  vlc \
  vscode-json-languageserver \
  vulkan-nouveau \
  wine \
  winetricks \
  xf86-video-intel \
  yaml-language-server \
  zip \
)

systemd_services=( \
  systemd-boot-update \
  NetworkManager \
  gdm \
  throttlestop \
  throttled \
  docker \
)

log() {
  action="${1}"
  message="${2}"
  echo -en "\033[0;33m---\033[0m "
  echo -en "\033[0;34m${action}\033[0m "
  echo -en "\033[0;33m-->\033[0m "
  echo -e "\033[0;32m${message}\033[0m"
}

start() {
  message="${1}"
  log "START" "${message}"
}

end() {
  message="${1}"
  log " END " "${message}"
}

find_files() {
  base_directory="${1}"
  fd --type file --hidden --base-directory "${base_directory}"
}

copy() {
  source="${1}"
  destination="${2}"
  sudo="${3:-false}"
  start "Diff ${source} to ${destination}"
  diff "${source}" "${destination}" || true
  end "Diff ${source} to ${destination}"
  start "Copy ${source} to ${destination}"
  # FIXME clean up
  if [[ "${sudo}" =~ ^(true|on|1)$ ]]; then
    sudo mkdir -p "$(dirname "${destination}")"
    sudo cp "${source}" "${destination}"
  else
    mkdir -p "$(dirname "${destination}")"
    cp "${source}" "${destination}"
  fi
  end "Copy ${source} to ${destination}"
}

copy_as_root() {
  source="${1}"
  destination="${2}"
  copy "${source}" "${destination}" "true"
}

start "Arch setup script"

start "Check if password required for sudo"
sudo true
end "Check if password required for sudo"

if ! command -v yay > /dev/null; then
  start "Install yay"
  pacman --sync --needed --noconfim git base-devel
  mkdir /tmp/yay
  git clone https://aur.archlinux.org/yay.git /tmp/yay
  (
    cd /tmp/yay && \
      makepkg --syncdeps --install --noconfirm
  )
  end "Install yay"
fi

start "System upgrade"
yay --sync --refresh --sysupgrade --noconfirm
end "System upgrade"

start "Install packages"
yay --sync --needed --noconfirm "${packages[@]}"
end "Install packages"

start "Update system configs files"
for config in $(find_files etc); do
  copy_as_root "${PWD}/etc/${config}" "/etc/${config}"
done
end "Update system configs files"

start "Update user configs files"
for config in $(find_files home); do
  copy "${PWD}/home/${config}" "${HOME}/${config}"
done
for config in $(find_files config); do
  copy "${PWD}/config/${config}" "${HOME}/.config/${config}"
done
end "Update user configs files"

start "Enable and start systemd services"
for service in "${systemd_services[@]}"; do
  start "Enable systemd service '${service}'"
  sudo systemctl enable --now "${service}.service"
  end "Enable systemd service '${service}'"
done
end "Enable and start systemd services"

end "Arch setup script"
